// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef DB_MODELS_ODB_HXX
#define DB_MODELS_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "DbModels.h"

#include <memory>
#include <cstddef>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>
#include <odb/view-image.hxx>
#include <odb/view-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // customer
  //
  template <>
  struct class_traits< ::db::customer >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::db::customer >
  {
    public:
    typedef ::db::customer object_type;
    typedef ::db::customer* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long long int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // product
  //
  template <>
  struct class_traits< ::db::product >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::db::product >
  {
    public:
    typedef ::db::product object_type;
    typedef ::db::product* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long long int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // order
  //
  template <>
  struct class_traits< ::db::order >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::db::order >
  {
    public:
    typedef ::db::order object_type;
    typedef ::db::order* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long long int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // customer_order
  //
  template <>
  struct class_traits< ::db::customer_order >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::db::customer_order >
  {
    public:
    typedef ::db::customer_order view_type;
    typedef ::db::customer_order* pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/pgsql/version.hxx>
#include <odb/pgsql/forward.hxx>
#include <odb/pgsql/binding.hxx>
#include <odb/pgsql/pgsql-types.hxx>
#include <odb/pgsql/query.hxx>

namespace odb
{
  // customer
  //
  template <typename A>
  struct query_columns< ::db::customer, id_pgsql, A >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        long long int,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // name
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    name_type_;

    static const name_type_ name;
  };

  template <typename A>
  const typename query_columns< ::db::customer, id_pgsql, A >::id_type_
  query_columns< ::db::customer, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::db::customer, id_pgsql, A >::name_type_
  query_columns< ::db::customer, id_pgsql, A >::
  name (A::table_name, "\"name\"", 0);

  template <typename A>
  struct pointer_query_columns< ::db::customer, id_pgsql, A >:
    query_columns< ::db::customer, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::db::customer, id_pgsql >:
    public access::object_traits< ::db::customer >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      long long id_value;
      bool id_null;

      // name
      //
      details::buffer name_value;
      std::size_t name_size;
      bool name_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 2UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::db::customer, id_common >:
    public access::object_traits_impl< ::db::customer, id_pgsql >
  {
  };

  // product
  //
  template <typename A>
  struct query_columns< ::db::product, id_pgsql, A >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        long long int,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // name
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    name_type_;

    static const name_type_ name;
  };

  template <typename A>
  const typename query_columns< ::db::product, id_pgsql, A >::id_type_
  query_columns< ::db::product, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::db::product, id_pgsql, A >::name_type_
  query_columns< ::db::product, id_pgsql, A >::
  name (A::table_name, "\"name\"", 0);

  template <typename A>
  struct pointer_query_columns< ::db::product, id_pgsql, A >:
    query_columns< ::db::product, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::db::product, id_pgsql >:
    public access::object_traits< ::db::product >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      long long id_value;
      bool id_null;

      // name
      //
      details::buffer name_value;
      std::size_t name_size;
      bool name_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 2UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::db::product, id_common >:
    public access::object_traits_impl< ::db::product, id_pgsql >
  {
  };

  // order
  //
  template <typename A>
  struct query_columns< ::db::order, id_pgsql, A >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        long long int,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // customer_id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        long long int,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    customer_id_type_;

    static const customer_id_type_ customer_id;

    // product_id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        long long int,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    product_id_type_;

    static const product_id_type_ product_id;

    // sum
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    sum_type_;

    static const sum_type_ sum;

    // date
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::time_t,
        pgsql::id_timestamp >::query_type,
      pgsql::id_timestamp >
    date_type_;

    static const date_type_ date;
  };

  template <typename A>
  const typename query_columns< ::db::order, id_pgsql, A >::id_type_
  query_columns< ::db::order, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::db::order, id_pgsql, A >::customer_id_type_
  query_columns< ::db::order, id_pgsql, A >::
  customer_id (A::table_name, "\"customer_id\"", 0);

  template <typename A>
  const typename query_columns< ::db::order, id_pgsql, A >::product_id_type_
  query_columns< ::db::order, id_pgsql, A >::
  product_id (A::table_name, "\"product_id\"", 0);

  template <typename A>
  const typename query_columns< ::db::order, id_pgsql, A >::sum_type_
  query_columns< ::db::order, id_pgsql, A >::
  sum (A::table_name, "\"sum\"", 0);

  template <typename A>
  const typename query_columns< ::db::order, id_pgsql, A >::date_type_
  query_columns< ::db::order, id_pgsql, A >::
  date (A::table_name, "\"date\"", 0);

  template <typename A>
  struct pointer_query_columns< ::db::order, id_pgsql, A >:
    query_columns< ::db::order, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::db::order, id_pgsql >:
    public access::object_traits< ::db::order >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      long long id_value;
      bool id_null;

      // customer_id
      //
      long long customer_id_value;
      bool customer_id_null;

      // product_id
      //
      long long product_id_value;
      bool product_id_null;

      // sum
      //
      double sum_value;
      bool sum_null;

      // date
      //
      long long date_value;
      bool date_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 5UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 1UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::db::order, id_common >:
    public access::object_traits_impl< ::db::order, id_pgsql >
  {
  };

  // customer_order
  //
  template <>
  class access::view_traits_impl< ::db::customer_order, id_pgsql >:
    public access::view_traits< ::db::customer_order >
  {
    public:
    struct image_type
    {
      // id
      //
      long long id_value;
      bool id_null;

      // customer_name
      //
      details::buffer customer_name_value;
      std::size_t customer_name_size;
      bool customer_name_null;

      // product_name
      //
      details::buffer product_name_value;
      std::size_t product_name_size;
      bool product_name_null;

      // sum
      //
      double sum_value;
      bool sum_null;

      // date
      //
      long long date_value;
      bool date_null;

      std::size_t version;
    };

    typedef pgsql::view_statements<view_type> statements_type;

    typedef pgsql::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 5UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);

    static const char query_statement_name[];
  };

  template <>
  class access::view_traits_impl< ::db::customer_order, id_common >:
    public access::view_traits_impl< ::db::customer_order, id_pgsql >
  {
  };

  // customer
  //
  // product
  //
  // order
  //
  // customer_order
  //
  struct access::view_traits_impl< ::db::customer_order, id_pgsql >::query_columns
  {
    // order
    //
    typedef
    odb::pointer_query_columns<
      ::db::order,
      id_pgsql,
      odb::access::object_traits_impl< ::db::order, id_pgsql > >
    order;

    // customer
    //
    typedef
    odb::pointer_query_columns<
      ::db::customer,
      id_pgsql,
      odb::access::object_traits_impl< ::db::customer, id_pgsql > >
    customer;

    // product
    //
    typedef
    odb::pointer_query_columns<
      ::db::product,
      id_pgsql,
      odb::access::object_traits_impl< ::db::product, id_pgsql > >
    product;
  };
}

#include "DbModels-odb.ixx"

#include <odb/post.hxx>

#endif // DB_MODELS_ODB_HXX
